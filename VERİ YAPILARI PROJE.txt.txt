#include<stdio.h>
#include<stdlib.h>
#include<time.h>
//---------------------------------------------------------------------------------------
void delay(unsigned int mseconds){
	clock_t goal=mseconds+clock();
	while(goal>clock());
}
//****************************************************************************************
int z=1;//global z sayacý tanýmlandý.
int pointsaktif=0;//puankapisinin aktiflik degiskenini olusturduk. 
int points=0;
struct kordinat //kordinat degerleri olusturuldu.
{
    int x;   
	int y;
}kor,anahtar,cikis;

struct node
{
	int veri1;
	int veri2;
	struct node *next;
};
struct node * push(struct node *st,int a,int b) //yýgýna ekleme fonksiyonu.
{
	struct node *ilk=st;
	if (st==NULL)  //stack boþ
	{
		st=(struct node *)malloc(sizeof(struct node));//ilk düðüm
		st->veri1=a;
		st->veri2=b;
		st->next=NULL;
		return st;	
	}
	else
	{
		if (st->next==NULL) //tek elemanlý
		{
		st->next=(struct node *)malloc(sizeof(struct node));
		st=st->next;
		st->veri1=a;
		st->veri2=b;
		st->next=NULL;
		return ilk;		
		}
		else{
			while(st->next!=NULL)// birden fazla elemanlý
			st=st->next;	
			st->next=(struct node *)malloc(sizeof(struct node));
			st=st->next;
			st->veri1=a;
			st->veri2=b;
			st->next=NULL;
			return ilk;
		}
				
	}
}

int pop(struct node *stkk)//yýgýndan silme fonksiyonu.
{
int rt1,rt2;
struct node *temp;
if (stkk==NULL)
return -1; //stack boþþþ
else
{
	if (stkk->next==NULL)// stack tek elemanlimi? 
	{
		rt1=stkk->veri1;
		rt2=stkk->veri2;
		free(stkk);
		return rt1,rt2;
	}
	else
	{
			while(stkk->next->next!=NULL)
			stkk=stkk->next;
			temp=stkk->next; //silinecek
			rt1=temp->veri1;
			rt2=temp->veri2;
			stkk->next=NULL;
			free(temp);
			return rt1;
	}
}
}

struct que
{
	struct node *front,*rear;
};
void create(struct que *k)
{
	k->front=k->rear=NULL;
}
void enq(struct que *w,int a,int b)// kuyruk ekleme fonksiyonu.
{
	struct node *temp;
	
	if(w->rear==NULL) //kuyruk içinde hiç düðüm yok ise
	{
		temp=(struct node *)malloc(sizeof(struct node));
		temp->veri1=a;
		temp->veri2=b;
		temp->next=NULL;
		w->rear=temp;
		w->front=w->rear; // bu ilk düðüm olduðu için
	}
	else
	{
		temp=(struct node *)malloc(sizeof(struct node));
		temp->veri1=a;
		temp->veri2=b;
		temp->next=NULL;
		w->rear->next=temp;
		w->rear=w->rear->next;
	}
}
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
void goster(struct node *s) // yýgýn degerlerini gosterme fonksiyonu.
{
	
	while(s!=NULL)
	{
		//delay(500);
		printf("Zar atiliyor...\n");
		printf("%d.Adim-->%d<***>%d\n",z,s->veri1,s->veri2);
		s=s->next;
		z++;
	}	
}
//*******************************************************************************************************************************************
void goster1(struct que* s) //kuyruk degerlerini gosterme fonksiyonu.
{
	struct node *temp=s->front;
	while (temp != NULL)
	{
		printf("%d->%d\n", temp->veri1,temp->veri2);
		temp = temp->next;
	}
}
//--------------------------------------------------------------------------------------------------------------------------------------
int engel(int a[],int b[]) // engellerini olusturuldugu fonksiyon.
{
	int i;
	for(i=0;i<50;i++)
	{
		
		a[i]=rand()%100;
		b[i]=rand()%100;
		//printf("%d**%d\n",a[i],b[i]); //Engellerin listesi.
	}
}
//*******************************************************************************************************************************************
void puan(int c[],int d[],int a[],int b[]) 
{
	int i;
	for(i=0;i<80;i++)
	{
		
		c[i]=rand()%100;
		d[i]=rand()%100;
		//printf("%d**%d\n",c[i],d[i]); //puan kordinatlarinin listesi. 
		if(c[i]==a[i] && d[i]==b[i]){
			c[i]=rand()%100;
			d[i]=rand()%100;
		}
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void puanbul(int c[],int d[],int k,int l){
	int i;
		
	for(i=0;i<80;i++){
		if(k==c[i] && l==d[i]){
			points=points+15;
			if(points>=50){
				pointsaktif=1;
			}
		}
	}
}
//--------------------------------------------------------------------------------------------------------------------------------------------
int engelx=0;
int engely=0;
int engelaktif=0;
void engelvarmi(int a[],int b[],int c,int d,struct node* stkk,int m,int z)// kordinar noktalarýnýn engele denk gelme durumunun karsýlatýrýlmasý.
{
	int i;
	for(i=0;i<50;i++)
	{
		if(c==a[i] && d==b[i])
		{
			engelx=a[i];
			engely=b[i];
			engelaktif=1;
			pop(stkk);
			kor.x=m;
			kor.y=z;
		}
	}
}
//********************************************************************************************************************************************
void anaht(int a[],int b[]) //anahtar ve cikis kordýnatlarýnýn olusturuldugu fonksiyon.
{
	int i;
	struct kordinat;
	anahtar.x=1+rand()%100;
	anahtar.y=1+rand()%100;
	for(i=0;i<50;i++) // anahtar kordinatlarýnda engel olma durumunun kontrol edilmesi. 
	{
		if(anahtar.x==a[i] && anahtar.y==b[i])
		{
			anahtar.x=1+rand()%100;
			anahtar.y=1+rand()%100;
		}
		else
		{
			break;
		}
	}
	cikis.x=100;
	cikis.y=(anahtar.y+rand()%(100-anahtar.y));
	
	for(i=0;i<50;i++) //cikis kordinatlarýnda engel olma durumunun kontrol edilmesi.
	{
		if(cikis.x==a[i] && cikis.y==b[i])
		{
			cikis.x=100;
			cikis.y=(anahtar.y+rand()%(100-anahtar.y));
		}
		else
		{
			break;
		}
	}
}
struct que *w;// global w kuyrugu olusturduk.

int main()
{
	
	int kup,veri1,veri2,kontrol,dkontrol=0,m,z;
	int baslangic=0,oyunsonu=0,x=0,y=0,i=0,anahtaraktif=0,cikisaktif=0;
	int a[50],b[50],c[80],d[80];
	srand(time(NULL));
	struct node *stkk=NULL;
	w=(struct que *)malloc(sizeof(struct que));
	create(w);// w kuyrugu olusturuldu.
	engel(a,b);//engel fonksiyonu cagrýlarak engellerin kordinatlarý belirlendi.
	anaht(a,b);//anahtar ve cikis kordinatlarý belirlendi.
	puan(c,d,a,b);
	do
	{
		kup=rand()%3;
		
		if(kup==0)
		{
			if(baslangic==0)
			{
			kor.x=0;
			kor.y=0;
			enq(w,kor.x,kor.y);
			stkk=push(stkk,kor.x,kor.y);
			engelvarmi(a,b,kor.x,kor.y,stkk,m,z);
			baslangic=1;
			}
			else
			{
				m=kor.x;//önceki adýmlar
				z=kor.y;//önceki adýmlar
				kor.x+=2;//her adýmda eklenen kordinatlar
				kor.y+=0;//her adýmda eklenen kordinatlar
			
				enq(w,kor.x,kor.y);
				stkk=push(stkk,kor.x,kor.y);
				engelvarmi(a,b,kor.x,kor.y,stkk,m,z);
				 puanbul(c,d,kor.x,kor.y);
				 
			}
			
		}
	
		else if(kup==1)
		{
			if(baslangic==0)
			{
			kor.x=0;
			kor.y=0;
			enq(w,kor.x,kor.y);
			stkk=push(stkk,kor.x,kor.y);
			baslangic=1;
			}
			else
			{
			m=kor.x;//önceki adýmlar
			z=kor.y;//önceki adýmlar
			
			kor.x+=0;//her adýmdaki eklenen kordinatlar
			kor.y+=2;//her adýmdaki eklenen kordinatlar
			
			enq(w,kor.x,kor.y);		
			stkk=push(stkk,kor.x,kor.y);
			engelvarmi(a,b,kor.x,kor.y,stkk,m,z);
			puanbul(c,d,kor.x,kor.y);
			
			}
			
		}
			else
		{
			if(baslangic==0)
			{
			kor.x=0;
			kor.y=0;
			enq(w,kor.x,kor.y);
			stkk=push(stkk,kor.x,kor.y);
			baslangic=1;
			}
			else
			{
				m=kor.x;//önceki adýmlar
				z=kor.y;//önceki adýmlar
				kor.x+=1;//her adýmda eklenen kordinatlar
				kor.y+=1;//her adýmda eklenen kordinatlar
			
				enq(w,kor.x,kor.y);
				stkk=push(stkk,kor.x,kor.y);
				engelvarmi(a,b,kor.x,kor.y,stkk,m,z);
				puanbul(c,d,kor.x,kor.y);
						
			
	}
		}//else bitti.
		if(kor.x==anahtar.x && kor.y==anahtar.y){
			anahtaraktif=1;
		}
		else if(kor.x==cikis.x && kor.y==cikis.y){
			
			if(anahtaraktif==1){
				goster(stkk);
				printf("Tebrikler  anahtar aktif...\n");
				printf("Oyunu kazandiniz...\n");
				printf("%d<-->%d(ANAHTAR)\n",anahtar.x,anahtar.y);
				printf("%d<**>%d(CIKIS)\n",cikis.x,cikis.y);
				if(engelaktif==1){
					printf("%d==%d(engeline carpti ve silindi)\n",engelx,engely);
				}
				return 0;
			}
			else{
				goster(stkk);
				printf("Anahtari almadan cikis yaptiniz...\n");
				printf("Oyunu kaybettiniz...\n");
				printf("%d<-->%d(ANAHTAR)\n",anahtar.x,anahtar.y);
				printf("%d<**>%d(CIKIS)\n",cikis.x,cikis.y);
				if(engelaktif==1){
					printf("%d==%d(engeline carpti ve silindi)\n",engelx,engely);
				}
				return 0;
			}
			
			
		}
		else if(kor.x>100 || kor.y>100){
			if(pointsaktif==1){
				goster(stkk);
				printf("Tebrikler  puan barajini gectiniz...\n");
				printf("Oyunu kazandiniz...\n");
				printf("%d<--->%d(ANAHTAR)\n",anahtar.x,anahtar.y);
				printf("%d<***>%d(CIKIS)\n",cikis.x,cikis.y);
				printf("%d(POINTS)\n",points);
				if(engelaktif==1){
					printf("%d==%d(engeline carpti ve silindi)\n",engelx,engely);
				}
				return 0;
			}
			else{
				goster(stkk);
				printf("Uzgunum  puan barajini gecemediniz...\n");
				printf("Oyunu kaybettiniz...\n");
				printf("%d<-->%d(ANAHTAR)\n",anahtar.x,anahtar.y);
				printf("%d<**>%d(CIKIS)\n",cikis.x,cikis.y);
				printf("%d(POINTS)\n",points);
				if(engelaktif==1){
					printf("%d==%d(engeline carpti ve silindi)\n",engelx,engely);
				}
				return 0;
			}	
		}
	
	
	

	}while(dkontrol==0);
}